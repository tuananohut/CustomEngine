Texture2D shaderTexture1: register(t0);
Texture2D shaderTexture2: register(t1);
Texture2D shaderTexture3: register(t2);
SamplerState SampleType: register(s0);

cbuffer LightBuffer
{
	float4 diffuseColor;
	float4 specularColor;
	float specularPower;
	float3 lightDirection;
};

struct PixelInputType
{
	float4 position: SV_POSITION;
	float2 tex: TEXCOORD0;
	float3 normal: NORMAL;
	float3 tangent: TANGENT;
	float3 binormal: BINORMAL;
	float3 viewDirection: TEXCOORD1;
};

float4 SpecMapPixelShader(PixelInputType input): SV_TARGET
{
	float4 textureColor;
	float4 bumpMap;
	float3 bumpNormal;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float4 specularIntensity;
	float3 reflection;
	float4 specular;

	textureColor = shaderTexture1.Sample(SampleType, input.tex);

	bumpMap = shaderTexture2.Sample(SampleType, input.tex);

	bumpMap = (bumpMap * 2.0f) - 1.0f;

	bumpNormal = (bumpMap.x * input.tangent) + (bumpMap.y * input.binormal) + (bumpMap.z * input.normal);

	bumpNormal = normalize(bumpNormal);

	lightDir = -lightDirection;

	lightIntensity = saturate(dot(bumpNormal, lightDir));

	color = saturate(diffuseColor * lightIntensity);
	
	color = color * textureColor;

	if (lightIntensity > 0.0f)
	{
		specularIntensity = shaderTexture3.Sample(SampleType, input.tex);
	
		reflection = normalize(2 * lightIntensity * bumpNormal - lightDir);

		specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);

		specular = specular * specularIntensity;

		color = saturate(color + specular);
	}

	return color;
}

