#define NUM_LIGHTS 4

Texture2D shaderTexture: register(t0);
SamplerState SampleType: register(s0);

cbuffer LightColorBuffer
{
	float4 diffuseColor[NUM_LIGHTS];
};

// cbuffer LightBuffer
// {
// 	float4 ambientColor;
// 	float4 diffuseColor;
// 	float3 lightDirection;
// 	float specularPower;
// 	float4 specularColor;
// };

struct PixelInputType
{
	float4 position: SV_POSITION;
	float2 tex: TEXCOORD0;
	float3 normal: NORMAL;
	// float3 viewDirection: TEXCOORD1;
	float3 lightPos[NUM_LIGHTS]: TEXCOORD1;
};

float4 LightPixelShader(PixelInputType input): SV_TARGET
{
	float4 textureColor;
	// float3 lightDir;
	// float3 reflection;
	// float4 specular;
	float lightIntensity[NUM_LIGHTS];
	float4 colorArray[NUM_LIGHTS];
	float4 colorSum;
	float4 color;
	int i;
	 
	textureColor = shaderTexture.Sample(SampleType, input.tex);

	for(i = 0; i < NUM_LIGHTS; i++)
	{
		lightIntensity[i] = saturate(dot(input.normal, input.lightPos[i]));

		colorArray[i] = diffuseColor[i] * lightIntensity[i];
	}

	colorSum = float4(0.0f, 0.0f, 0.0f, 1.0f);

	for(i = 0; i < NUM_LIGHTS; i++)
	{
		colorSum.r += colorArray[i].r;
		colorSum.g += colorArray[i].g;
		colorSum.b += colorArray[i].b;
	}


	
	// color = ambientColor;
	// 
	// specular = float4(0.0f, 0.0f, 0.0f, 0.0f);
	// 
	// lightDir = -lightDirection;
	// 
	// lightIntensity = saturate(dot(input.normal, lightDir));
	// 
	// if(lightIntensity > 0.0f)
	// {
	// 	color += (diffuseColor * lightIntensity);
	// 
	// 	color = saturate(color);
	// 
	// 	reflection = normalize(2.0f * lightIntensity * input.normal - lightDir);
	// 
	// 	specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
	// }
	// 
	// 
	// color = saturate(color + specular);
	
	color = saturate(colorSum) * textureColor;

	return color;
}