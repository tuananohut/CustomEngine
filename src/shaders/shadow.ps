Texture2D depthMapTexture: register(t0);
SamplerState SampleTypeClamp: register(s0);

struct PixelInputType
{
	float4 position: SV_POSITION;
	float2 tex: TEXCOORD0;
	float3 normal: NORMAL;
	float4 lightViewPosition: TEXCOORD1;
	float3 lightPos: TEXCOORD2;
};

cbuffer LightBuffer
{
	float bias;
	float3 padding;
};

float4 ShadowPixelShader(PixelInputType input): SV_TARGET
{
	float4 color;
	float2 projectTexCoord;
	float depthValue;
	float lightDepthValue;
	float lightIntensity;

	color = float4(0.f, 0.f, 0.f, 1.f); 

	projectTexCoord.x = input.lightViewPosition.x / input.lightViewPosition.w / 2.f + 0.5f;
	projectTexCoord.y = -input.lightViewPosition.y / input.lightViewPosition.w / 2.f + 0.5f;

	if ((saturate(projectTexCoord.x) == projectTexCoord.x) && (saturate(projectTexCoord.y) == projectTexCoord.y))
	{
		depthValue = depthMapTexture.Sample(SampleTypeClamp, projectTexCoord).r;

		lightDepthValue = input.lightViewPosition.z / input.lightViewPosition.w;

		lightDepthValue = lightDepthValue - bias;

		if (lightDepthValue < depthValue)
		{
			lightIntensity = saturate(dot(input.normal, lightDir));

			if(lightIntensity > 0.f)
			{
				color = float4(1.f, 1.f, 1.f, 1.f);
			}
		}
	}
	
	return color;
}
