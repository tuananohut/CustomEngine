cbuffer MatrixBuffer
{
	matrix worldMatrix;
	matrix viewMatrix;
	matrix projectionMatrix;
};

struct ConstantOutputType
{
	float edges[3]: SV_TessFactor;
	float inside: SV_InsideTessFactor;
};

struct HullOutputType
{
	float3 position: POSITION;
	float4 color: COLOR;
};

struct PixelInputType
{
	float4 position: SV_POSITION;
	float4 color: COLOR;
};

[domain("tri")]
PixelInputType ColorDomainShader(ConstantOutputType input, float3 uvwCoord: SV_DomainLocation, const OutputPatch<HullOutputType, 3> patch)
{
	float3 vertexPosition;
	PixelInputType output; 
	
	// Linear Interpolation
	// vertexPosition = uvwCoord.x * patch[0].position + uvwCoord.y * patch[1].position + uvwCoord.z * patch[2].position;

	// Changed weights
	// vertexPosition = uvwCoord.x * patch[0].position * 1.5 + uvwCoord.y * patch[1].position + uvwCoord.z * patch[2].position * 3;
	
	// Curved geometry
	float curvature = 0.8;
	vertexPosition = uvwCoord.x * patch[0].position * 2 + 
					 uvwCoord.y * patch[1].position * 2 + 
					 uvwCoord.z * patch[2].position * 2;
	
	vertexPosition.z += curvature * length(vertexPosition.xy);

	// Spiral Effect
	// float angle = uvwCoord.x * 3.1415 * 2.0;
	// float radius = uvwCoord.y * 0.5;         
	// vertexPosition = float3(cos(angle) * radius, sin(angle) * radius, uvwCoord.z) + (uvwCoord.x * patch[0].position + uvwCoord.y * patch[1].position + uvwCoord.z * patch[2].position);
	
	output.position = mul(float4(vertexPosition, 1.f), worldMatrix);
	output.position = mul(output.position, viewMatrix);
	output.position = mul(output.position, projectionMatrix);

	output.color = patch[0].color;

	return output;
}