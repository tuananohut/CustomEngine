Texture2D colorTexture: register(t0); 
Texture2D normalTexture: register(t1);
SamplerState SampleTypePoint: register(s0);

#define NUM_LIGHTS 4

cbuffer LightColorBuffer
{
	float4 diffuseColor[NUM_LIGHTS];
};

struct PixelInputType
{
	float4 position: SV_POSITION;
	float2 tex: TEXCOORD0;
	float3 lightPos[NUM_LIGHTS]: TEXCOORD1;
};

float4 LightPixelShader(PixelInputType input): SV_TARGET
{
    float4 colors = colorTexture.Sample(SampleTypePoint, input.tex);
    float4 normals = normalTexture.Sample(SampleTypePoint, input.tex);

    float4 outputColor = float4(0.f, 0.f, 0.f, colors.a); 

    for (int i = 0; i < NUM_LIGHTS; i++)
    {
        float lightIntensity = saturate(abs(dot(normals.xyz, input.lightPos[i])));
        outputColor += diffuseColor[i] * lightIntensity * colors;
    }

    outputColor = saturate(outputColor);

    return outputColor;
}
