SamplerState SampleTypePoint : register(s0);
Texture2D normalsTexture : register(t0);
Texture2D ssaoTexture : register(t1);
Texture2D colorsTexture : register(t2);

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 lightDirection : TEXCOORD1;
};

float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float ambientOcclusion;
	float4 ambientColor;
	float4 color;
	float3 normal;
	float lightIntensity;

	textureColor = colorsTexture.Sample(SampleTypePoint, input.tex);

    ambientOcclusion = ssaoTexture.Sample(SampleTypePoint, input.tex).r;
	ambientColor = float4(ambientOcclusion, ambientOcclusion, ambientOcclusion, 1.0f);
	
	color = 1.f - ambientColor;

    normal = normalsTexture.Sample(SampleTypePoint, input.tex).xyz;

    lightIntensity = saturate(dot(normal, input.lightDirection));
	if(lightIntensity > 0.f)
	{
		color += float4(1.f, 1.f, 1.f, 1.f) * lightIntensity;
	}

    color = saturate(color);
	
	color = color * textureColor;

    return color;
}
