Texture2D diffuseTexture: register(t0);
Texture2D normalMap: register(t1);
Texture2D rmTexture: register(t2);
SamplerState SampleType: register(s0);

cbuffer LightBuffer
{
	float3 lightDirection;
	float padding;
};

struct PixelInputType
{
	float4 position: SV_POSITION;
	float2 tex: TEXCOORD0;
	float3 normal: NORMAL;
	float3 tangent: TANGENT;
	float3 binormal: BINORMAL;
	float3 viewDirection: TEXCOORD1;
};

float GGXNormalDistribution(float roughnessSqr, float NdotH);
float GeometryFunction(float roughnessSqr, float NdotL, float NdotV);
float3 FresnelSchlick(float3 F0, float HdotV);

float4 PBRPixelShader(PixelInputType input): SV_TARGET
{
	float3 lightDir;
	float3 albedo, rmColor, bumpMap;
	float3 bumpNormal;
	float roughness, metallic; 
	float3 F0;
	float3 halfDirection;
	float NdotH, NdotV, NdotL, HdotV; 
	float roughnessSqr, roughSqr2, NdotHSqr, denominator, normalDistribution;
	float smithL, smithV, geometricShadow; 
	float3 fresnel; 
	float3 specularity; 
	float4 color; 

	lightDir = -lightDirection; 

	albedo = diffuseTexture.Sample(SampleType, input.tex).rgb;
	rmColor = rmTexture.Sample(SampleType, input.tex).rgb; 
	bumpMap = normalMap.Sample(SampleType, input.tex).rgb;

	bumpMap = (bumpMap * 2.f) - 1.f; 
	bumpNormal = (bumpMap.x * input.tangent) + (bumpMap.y * input.binormal) + (bumpMap.z * input.normal);
	bumpNormal = normalize(bumpNormal);

	roughness = rmColor.r;
	metallic = rmColor.b; 

	F0 = float3(0.04f, 0.04f, 0.04f);
	F0 = lerp(F0, albedo, metallic); // linear interpolation

	halfDirection = normalize(input.viewDirection + lightDir);
	NdotH = max(0.f, dot(bumpNormal, halfDirection));
	NdotV = max(0.f, dot(bumpNormal, input.viewDirection));
	NdotL = max(0.f, dot(bumpNormal, lightDir));
	HdotV = max(0.f, dot(halfDirection, input.viewDirection));
	
	roughnessSqr = roughness * roughness;
	
	normalDistribution = GGXNormalDistribution(roughnessSqr, NdotH);

	geometricShadow = GeometryFunction(roughnessSqr, NdotL, NdotV);

	fresnel = FresnelSchlick(F0, HdotV);

	// Cook-Torrance speculat BRDF calculation
	specularity = (normalDistribution * fresnel * geometricShadow) / ((4.f * (NdotL * NdotV)) + 0.00001f);

	color.rgb = albedo + specularity; 
	color.rgb = color.rgb * NdotL;

	color = float4(color.rgb, 1.f);

	return color;
}

// GGX normal distribution calculation 
float GGXNormalDistribution(float roughnessSqr, float NdotH)
{
	float roughSqr, NdotHSqr, denominator, normalDistribution, roughSqr2;

	roughSqr2 = roughnessSqr * roughnessSqr;
	NdotHSqr = NdotH * NdotH; 
	denominator = (NdotHSqr * (roughSqr2 - 1.f) + 1.f);
	denominator = 3.14159265359f * (denominator * denominator);
	normalDistribution = roughSqr2 / denominator; 

	return normalDistribution;
}

// Schlick - GGX for geometry function
float GeometryFunction(float roughnessSqr, float NdotL, float NdotV)
{
	float smithL, smithV, geometricShadow;
	
	smithL = NdotL / (NdotL * (1.f - roughnessSqr) + roughnessSqr);
	smithV = NdotV / (NdotV * (1.f - roughnessSqr) + roughnessSqr);
	geometricShadow = smithL * smithV;

	return geometricShadow;
}

// Fresnel Schlick for fresnel calculation
float3 FresnelSchlick(float3 F0, float HdotV)
{
	float3 fresnel;
	fresnel = F0 + (1.f - F0) * pow(1.f - HdotV, 5.f);
	
	return fresnel;
}