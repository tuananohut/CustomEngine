cbuffer ScreenBuffer
{
	float screenWidth;
	float screenHeight; 
	float blurType;
	float padding;
};

Texture2D shaderTexture: register(t0);
SamplerState SampleType: register(s0);

struct PixelInputType
{
	float4 position: SV_POSITION;
	float2 tex: TEXCOORD0;
};

float4 BlurPixelShader(PixelInputType input): SV_TARGET
{
	float texelSize;
	float2 texCoord1, texCoord2, texCoord3, texCoord4, texCoord5, texCoord6, texCoord7, texCoord8, texCoord9, texCoord10;
	float weight0, weight1, weight2, weight3, weight4, weight5;
	float normalization;
	float4 color;

	if (blurType < 0.1f)
	{
		texelSize = 1.f / screenWidth;

		texCoord1 = input.tex + float2(texelSize * -4.0f, 0.0f);
        texCoord2 = input.tex + float2(texelSize * -3.0f, 0.0f);
        texCoord3 = input.tex + float2(texelSize * -2.0f, 0.0f);
        texCoord4 = input.tex + float2(texelSize * -1.0f, 0.0f);
        texCoord5 = input.tex + float2(texelSize *  0.0f, 0.0f);
        texCoord6 = input.tex + float2(texelSize *  1.0f, 0.0f);
        texCoord7 = input.tex + float2(texelSize *  2.0f, 0.0f);
        texCoord8 = input.tex + float2(texelSize *  3.0f, 0.0f);
        texCoord9 = input.tex + float2(texelSize *  4.0f, 0.0f);
        texCoord10 = input.tex + float2(texelSize *  10.0f, 0.0f);
	}

	else 
	{
		texelSize = 1.f / screenHeight;

		texCoord1 = input.tex + float2(texelSize * -4.0f, 0.0f);
        texCoord2 = input.tex + float2(texelSize * -3.0f, 0.0f);
        texCoord3 = input.tex + float2(texelSize * -2.0f, 0.0f);
        texCoord4 = input.tex + float2(texelSize * -1.0f, 0.0f);
        texCoord5 = input.tex + float2(texelSize *  0.0f, 0.0f);
        texCoord6 = input.tex + float2(texelSize *  1.0f, 0.0f);
        texCoord7 = input.tex + float2(texelSize *  2.0f, 0.0f);
        texCoord8 = input.tex + float2(texelSize *  3.0f, 0.0f);
        texCoord9 = input.tex + float2(texelSize *  4.0f, 0.0f);
        texCoord10 = input.tex + float2(texelSize *  10.0f, 0.0f);
	}

	weight0 = 1.f;
	weight1 = 0.7f;
	weight2 = 0.5f;
	weight3 = 0.15f;
	weight4 = 0.1f;
	weight5 = 0.f;

	normalization = (weight0 + 2.f * (weight1 + weight2 + weight3 + weight4 + weight5));

	weight0 = weight0 / normalization;
	weight1 = weight1 / normalization;
	weight2 = weight2 / normalization;
	weight3 = weight3 / normalization;
	weight4 = weight4 / normalization;
	weight5 = weight5 / normalization;

	color = float4(0.f, 0.f, 0.f, 0.f);

	color += shaderTexture.Sample(SampleType, texCoord1) * weight4;
	color += shaderTexture.Sample(SampleType, texCoord2) * weight3;
    color += shaderTexture.Sample(SampleType, texCoord3) * weight2;
    color += shaderTexture.Sample(SampleType, texCoord4) * weight1;
    color += shaderTexture.Sample(SampleType, texCoord5) * weight0;
    color += shaderTexture.Sample(SampleType, texCoord6) * weight1;
    color += shaderTexture.Sample(SampleType, texCoord7) * weight2;
    color += shaderTexture.Sample(SampleType, texCoord8) * weight3;
    color += shaderTexture.Sample(SampleType, texCoord9) * weight4;
    color += shaderTexture.Sample(SampleType, texCoord10) * weight5;

	color.a = 1.f;

	return color;
}