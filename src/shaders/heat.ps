Texture2D colorTexture: register(t0);
Texture2D glowTexture: register(t1);
Texture2D noiseTexture: register(t2);
SamplerState SampleTypeClamp: register(s0);
SamplerState SampleTypeWrap: register(s1);

cbuffer GlowBuffer
{
	float emissiveMultiplier; 
	float3 padding;
};

cbuffer DistortionBuffer
{
	float2 distortion1;
	float2 distortion2;
	float2 distortion3;
	float distortionScale;
	float distortionBias;
};

struct PixelInputType
{
	float4 position: SV_POSITION;
	float2 tex: TEXCOORD0;
	float2 texCoords1: TEXCOORD1;
	float2 texCoords2: TEXCOORD2;
	float2 texCoords3: TEXCOORD3;
};

float4 HeatPixelShader(PixelInputType input): SV_TARGET
{
	float4 noise1, noise2, noise3;
	float4 finalNoise; 
	float heatOffsetBias;
	float2 heatOffset;
	float4 glowMap; 
	float4 textureColor; 
	float4 color; 

	noise1 = noiseTexture.Sample(SampleTypeWrap, input.texCoords1);
	noise2 = noiseTexture.Sample(SampleTypeWrap, input.texCoords2);
	noise3 = noiseTexture.Sample(SampleTypeWrap, input.texCoords3);

	noise1 = (noise1 - 0.5f) * 2.f; 
	noise2 = (noise2 - 0.5f) * 2.f; 
	noise3 = (noise3 - 0.5f) * 2.f; 

	noise1.xy = noise1.xy * distortion1.xy;
	noise2.xy = noise2.xy * distortion2.xy;
	noise3.xy = noise3.xy * distortion3.xy;

	finalNoise = noise1 + noise2 + noise3;

	heatOffsetBias = 0.001f;

	heatOffset = ((finalNoise * 2.f) - 1.f) * heatOffsetBias; 

	glowMap = glowTexture.Sample(SampleTypeClamp, input.tex + heatOffset);

	textureColor = colorTexture.Sample(SampleTypeClamp, input.tex);

	color = saturate(textureColor + (glowMap * emissiveMultiplier));

	return color;
}